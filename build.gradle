plugins {
    // Provide convenience executables for trying out server and client
    id 'application'
    id 'com.google.protobuf' version '0.8.8'
    id 'java'
    id 'idea' // Generate IntelliJ IDEA's .idea & .iml project files
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    mavenLocal()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'com.betpawa'
version '0.1-SNAPSHOT'

def grpcVersion = '1.19.0' // CURRENT_GRPC_VERSION
def protobufVersion = '3.6.1'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "javax.annotation:javax.annotation-api:1.2"
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    compile "org.hibernate:hibernate-core:5.4.1.Final"
    compile "org.slf4j:slf4j-api:1.7.25"
    compile "ch.qos.logback:logback-classic:1.2.3"
    compile "ch.qos.logback:logback-core:1.2.3"
    compile "ch.qos.logback.contrib:logback-json-classic:0.1.5"
    compile "ch.qos.logback.contrib:logback-jackson:0.1.5"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.6"
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testCompile "junit:junit:4.12"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

startScripts.enabled = false

task walletServer(type: CreateStartScripts) {
    mainClassName = 'com.betpawa.wallet.WalletServer'
    applicationName = 'wallet-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task walletClient(type: CreateStartScripts) {
    mainClassName = 'com.betpawa.wallet.WalletClient'
    applicationName = 'wallet-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(walletServer)
    from(walletClient)
    fileMode = 0755
}
